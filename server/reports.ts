import PDFDocument from 'pdfkit';
import PdfTable from 'pdfkit-table';
import { Transaction } from '@shared/schema';
import fs from 'fs';
import path from 'path';

// Ensure the uploads directory exists
const uploadsDir = path.join(process.cwd(), 'uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
}

interface ProfitLossData {
  revenues: Transaction[];
  expenses: Transaction[];
  totalRevenue: number;
  totalExpenses: number;
  profit: number;
  profitMargin: number;
}

interface CashFlowData {
  transactions: Transaction[];
  startingBalance: number;
  endingBalance: number;
  netCashFlow: number;
}

interface GrowthData {
  metrics: {
    period: string;
    revenue: number;
    expenses: number;
    profit: number;
    growthRate?: number;
  }[];
  overallGrowthRate: number;
}

export interface ReportOptions {
  title: string;
  period: string;
  type: string;
  userId: number;
  userName: string;
  businessName?: string;
  currency: string;
}

/**
 * Generate a PDF profit and loss report
 */
export async function generateProfitLossReport(
  data: ProfitLossData,
  options: ReportOptions
): Promise<string> {
  const doc = new PDFDocument({
    margins: { top: 50, bottom: 50, left: 50, right: 50 },
    size: 'A4',
  }) as any; // Cast to any to accommodate PdfTable extension

  // Generate a filename
  const filename = `profit-loss-${options.period.replace(/\s+/g, '-').toLowerCase()}-${Date.now()}.pdf`;
  const outputPath = path.join(uploadsDir, filename);
  
  // Create a write stream to save the file
  const stream = fs.createWriteStream(outputPath);
  doc.pipe(stream);

  // Add metadata
  doc.info.Title = `${options.title} - ${options.period}`;
  doc.info.Author = 'GrowWise Financial Management';
  doc.info.Subject = `Profit & Loss Report for ${options.period}`;

  // Add header with logo and title
  addHeader(doc, options);

  // Financial summary section
  doc.fontSize(14).font('Helvetica-Bold').text('Financial Summary', { align: 'left' });
  doc.moveDown(0.5);
  
  // Summary boxes
  addSummaryBoxes(doc, [
    { label: 'Total Revenue', value: formatCurrency(data.totalRevenue, options.currency) },
    { label: 'Total Expenses', value: formatCurrency(data.totalExpenses, options.currency) },
    { label: 'Net Profit', value: formatCurrency(data.profit, options.currency) },
    { label: 'Profit Margin', value: `${(data.profitMargin * 100).toFixed(1)}%` }
  ]);
  
  doc.moveDown(1);

  // Revenue table
  doc.fontSize(14).font('Helvetica-Bold').text('Revenue Breakdown', { align: 'left' });
  doc.moveDown(0.5);
  
  if (data.revenues.length > 0) {
    await addTransactionTable(doc, data.revenues, options.currency, 'income');
  } else {
    doc.fontSize(10).font('Helvetica').text('No revenue data available for this period.');
  }
  
  doc.moveDown(1);

  // Expenses table
  doc.fontSize(14).font('Helvetica-Bold').text('Expense Breakdown', { align: 'left' });
  doc.moveDown(0.5);
  
  if (data.expenses.length > 0) {
    await addTransactionTable(doc, data.expenses, options.currency, 'expense');
  } else {
    doc.fontSize(10).font('Helvetica').text('No expense data available for this period.');
  }

  // Add footer with page numbers
  const totalPages = doc.bufferedPageRange().count;
  for (let i = 0; i < totalPages; i++) {
    doc.switchToPage(i);
    
    // Save the current position
    const originalBottom = doc.page.margins.bottom;
    
    // Temporarily move the bottom margin to make space for the footer
    doc.page.margins.bottom = 0;
    
    doc.fontSize(8)
      .font('Helvetica')
      .text(
        `Generated by GrowWise on ${formatDate(new Date())} | Page ${i + 1} of ${totalPages}`,
        50,
        doc.page.height - 30,
        { align: 'center' }
      );
    
    // Restore the original margin
    doc.page.margins.bottom = originalBottom;
  }

  // Finalize the PDF
  doc.end();

  return new Promise((resolve, reject) => {
    stream.on('finish', () => resolve(filename));
    stream.on('error', reject);
  });
}

/**
 * Generate a PDF cash flow report
 */
export async function generateCashFlowReport(
  data: CashFlowData,
  options: ReportOptions
): Promise<string> {
  const doc = new PDFDocument({
    margins: { top: 50, bottom: 50, left: 50, right: 50 },
    size: 'A4',
  }) as any; // Cast to any to accommodate PdfTable extension

  // Generate a filename
  const filename = `cash-flow-${options.period.replace(/\s+/g, '-').toLowerCase()}-${Date.now()}.pdf`;
  const outputPath = path.join(uploadsDir, filename);
  
  // Create a write stream to save the file
  const stream = fs.createWriteStream(outputPath);
  doc.pipe(stream);

  // Add metadata
  doc.info.Title = `${options.title} - ${options.period}`;
  doc.info.Author = 'GrowWise Financial Management';
  doc.info.Subject = `Cash Flow Report for ${options.period}`;

  // Add header with logo and title
  addHeader(doc, options);

  // Cash flow summary section
  doc.fontSize(14).font('Helvetica-Bold').text('Cash Flow Summary', { align: 'left' });
  doc.moveDown(0.5);
  
  // Summary boxes
  addSummaryBoxes(doc, [
    { label: 'Starting Balance', value: formatCurrency(data.startingBalance, options.currency) },
    { label: 'Ending Balance', value: formatCurrency(data.endingBalance, options.currency) },
    { label: 'Net Cash Flow', value: formatCurrency(data.netCashFlow, options.currency) },
    { 
      label: 'Cash Change', 
      value: `${((data.netCashFlow / data.startingBalance) * 100).toFixed(1)}%`,
      isPositive: data.netCashFlow >= 0
    }
  ]);
  
  doc.moveDown(1);

  // Transactions table
  doc.fontSize(14).font('Helvetica-Bold').text('Cash Flow Transactions', { align: 'left' });
  doc.moveDown(0.5);
  
  if (data.transactions.length > 0) {
    await addTransactionTable(doc, data.transactions, options.currency);
  } else {
    doc.fontSize(10).font('Helvetica').text('No transaction data available for this period.');
  }

  // Add footer with page numbers
  const totalPages = doc.bufferedPageRange().count;
  for (let i = 0; i < totalPages; i++) {
    doc.switchToPage(i);
    
    const originalBottom = doc.page.margins.bottom;
    doc.page.margins.bottom = 0;
    
    doc.fontSize(8)
      .font('Helvetica')
      .text(
        `Generated by GrowWise on ${formatDate(new Date())} | Page ${i + 1} of ${totalPages}`,
        50,
        doc.page.height - 30,
        { align: 'center' }
      );
    
    doc.page.margins.bottom = originalBottom;
  }

  // Finalize the PDF
  doc.end();

  return new Promise((resolve, reject) => {
    stream.on('finish', () => resolve(filename));
    stream.on('error', reject);
  });
}

/**
 * Generate a PDF growth analysis report
 */
export async function generateGrowthReport(
  data: GrowthData,
  options: ReportOptions
): Promise<string> {
  const doc = new PDFDocument({
    margins: { top: 50, bottom: 50, left: 50, right: 50 },
    size: 'A4',
  }) as any; // Cast to any to accommodate PdfTable extension

  // Generate a filename
  const filename = `growth-analysis-${options.period.replace(/\s+/g, '-').toLowerCase()}-${Date.now()}.pdf`;
  const outputPath = path.join(uploadsDir, filename);
  
  // Create a write stream to save the file
  const stream = fs.createWriteStream(outputPath);
  doc.pipe(stream);

  // Add metadata
  doc.info.Title = `${options.title} - ${options.period}`;
  doc.info.Author = 'GrowWise Financial Management';
  doc.info.Subject = `Growth Analysis Report for ${options.period}`;

  // Add header with logo and title
  addHeader(doc, options);

  // Growth summary section
  doc.fontSize(14).font('Helvetica-Bold').text('Growth Analysis Summary', { align: 'left' });
  doc.moveDown(0.5);
  
  // Overall growth rate
  doc.fontSize(12).font('Helvetica-Bold');
  doc.text(`Overall Growth Rate: ${(data.overallGrowthRate * 100).toFixed(1)}%`, {
    continued: true,
    align: 'left'
  });
  
  // Add color indicator
  if (data.overallGrowthRate >= 0) {
    doc.fillColor('#27AE60').text(' ↑', { align: 'left' });
  } else {
    doc.fillColor('#E53E3E').text(' ↓', { align: 'left' });
  }
  
  // Reset color
  doc.fillColor('black');
  doc.moveDown(1);

  // Growth metrics table
  doc.fontSize(14).font('Helvetica-Bold').text('Growth Metrics by Period', { align: 'left' });
  doc.moveDown(0.5);
  
  if (data.metrics.length > 0) {
    await addGrowthTable(doc, data.metrics, options.currency);
  } else {
    doc.fontSize(10).font('Helvetica').text('No growth data available for this period.');
  }

  // Add footer with page numbers
  const totalPages = doc.bufferedPageRange().count;
  for (let i = 0; i < totalPages; i++) {
    doc.switchToPage(i);
    
    const originalBottom = doc.page.margins.bottom;
    doc.page.margins.bottom = 0;
    
    doc.fontSize(8)
      .font('Helvetica')
      .text(
        `Generated by GrowWise on ${formatDate(new Date())} | Page ${i + 1} of ${totalPages}`,
        50,
        doc.page.height - 30,
        { align: 'center' }
      );
    
    doc.page.margins.bottom = originalBottom;
  }

  // Finalize the PDF
  doc.end();

  return new Promise((resolve, reject) => {
    stream.on('finish', () => resolve(filename));
    stream.on('error', reject);
  });
}

// Helper functions

function addHeader(doc: PDFKit.PDFDocument, options: ReportOptions) {
  // GrowWise logo and title - for now just text until we have a logo
  doc.fontSize(24).font('Helvetica-Bold').text('GrowWise', { align: 'center' });
  doc.fontSize(18).font('Helvetica').text(`${options.title}`, { align: 'center' });
  doc.fontSize(12).font('Helvetica').text(`Period: ${options.period}`, { align: 'center' });
  
  // Add business info if available
  if (options.businessName) {
    doc.fontSize(12).font('Helvetica').text(`Business: ${options.businessName}`, { align: 'center' });
  }
  
  doc.moveDown(2);
}

function addSummaryBoxes(doc: PDFKit.PDFDocument, items: { label: string; value: string; isPositive?: boolean }[]) {
  const width = (doc.page.width - doc.page.margins.left - doc.page.margins.right) / 4;
  const height = 70;
  const startX = doc.page.margins.left;
  const startY = doc.y;
  
  items.forEach((item, index) => {
    const x = startX + (width * index);
    
    // Box background
    doc.fillColor('#f7f7f7')
       .roundedRect(x, startY, width - 10, height, 5)
       .fill();
    
    // Box border
    doc.strokeColor('#e0e0e0')
       .roundedRect(x, startY, width - 10, height, 5)
       .stroke();
    
    // Reset fill color to black for text
    doc.fillColor('black');
    
    // Label and value
    doc.fontSize(10).font('Helvetica').text(item.label, x + 10, startY + 15);
    
    // Value with color based on +/- if required
    if (item.isPositive !== undefined) {
      doc.fontSize(16).font('Helvetica-Bold')
         .fillColor(item.isPositive ? '#27AE60' : '#E53E3E')
         .text(item.value, x + 10, startY + 35);
    } else {
      doc.fontSize(16).font('Helvetica-Bold')
         .fillColor('black')
         .text(item.value, x + 10, startY + 35);
    }
  });
  
  // Update the Y position for the next content
  doc.y = startY + height + 20;
}

async function addTransactionTable(
  doc: any, // Using any for PDFKit + Table extension
  transactions: Transaction[],
  currency: string,
  filterType?: 'income' | 'expense'
) {
  // Filter transactions if needed
  const filteredTransactions = filterType 
    ? transactions.filter(t => t.type === filterType)
    : transactions;
  
  // If no transactions remain after filtering, show a message
  if (filteredTransactions.length === 0) {
    doc.fontSize(10).font('Helvetica').text(`No ${filterType} transactions available for this period.`);
    return;
  }
  
  // Prepare table data
  const tableData = {
    headers: ['Date', 'Description', 'Category', 'Amount'],
    rows: filteredTransactions.map(t => [
      formatDate(new Date(t.date)),
      t.description,
      t.category || 'Uncategorized',
      formatCurrency(t.amount, currency)
    ])
  };
  
  // Add the table
  await doc.table(tableData, {
    prepareHeader: () => doc.fontSize(10).font('Helvetica-Bold'),
    prepareRow: (row: string[], i: number) => {
      doc.fontSize(10).font('Helvetica');
      return doc;
    },
    width: doc.page.width - doc.page.margins.left - doc.page.margins.right
  });
}

async function addGrowthTable(
  doc: any, // Using any for PDFKit + Table extension
  metrics: { period: string; revenue: number; expenses: number; profit: number; growthRate?: number }[],
  currency: string
) {
  // Prepare table data
  const tableData = {
    headers: ['Period', 'Revenue', 'Expenses', 'Profit', 'Growth Rate'],
    rows: metrics.map(m => [
      m.period,
      formatCurrency(m.revenue, currency),
      formatCurrency(m.expenses, currency),
      formatCurrency(m.profit, currency),
      m.growthRate !== undefined ? `${(m.growthRate * 100).toFixed(1)}%` : 'N/A'
    ])
  };
  
  // Add the table
  await doc.table(tableData, {
    prepareHeader: () => doc.fontSize(10).font('Helvetica-Bold'),
    prepareRow: (row: string[], i: number) => {
      doc.fontSize(10).font('Helvetica');
      return doc;
    },
    width: doc.page.width - doc.page.margins.left - doc.page.margins.right
  });
}

function formatCurrency(amount: number, currency: string): string {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency || 'USD'
  }).format(amount);
}

function formatDate(date: Date): string {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
}